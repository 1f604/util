# The golangci-lint config I'm using. I think it's very cool!
# The main reason I'm using it is because of exhaustruct.

run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 3m

# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 10.0

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map

  exhaustruct:
    # List of regular expressions to exclude struct packages and names from check.
    # Default: []
    exclude:
      # std libs
      - "^net/http.Client$"
      - "^net/http.Cookie$"
      - "^net/http.Request$"
      - "^net/http.Response$"
      - "^net/http.Server$"
      - "^net/http.Transport$"
      - "^net/url.URL$"
      - "^os/exec.Cmd$"
      - "^reflect.StructField$"
      # public libs
      - "^github.com/Shopify/sarama.Config$"
      - "^github.com/Shopify/sarama.ProducerMessage$"
      - "^github.com/mitchellh/mapstructure.DecoderConfig$"
      - "^github.com/prometheus/client_golang/.+Opts$"
      - "^github.com/spf13/cobra.Command$"
      - "^github.com/spf13/cobra.CompletionOptions$"
      - "^github.com/stretchr/testify/mock.Mock$"
      - "^github.com/testcontainers/testcontainers-go.+Request$"
      - "^github.com/testcontainers/testcontainers-go.FromDockerfile$"
      - "^golang.org/x/tools/go/analysis.Analyzer$"
      - "^google.golang.org/protobuf/.+Options$"
      - "^gopkg.in/yaml.v3.Node$"

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false

  gomnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
      - flag.Arg
      - flag.Duration.*
      - flag.Float.*
      - flag.Int.*
      - flag.Uint.*
      - os.Chmod
      - os.Mkdir.*
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets.*
      - prometheus.LinearBuckets

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/google/uuid
            reason: "gofrs' package is not go module"

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too strict
    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

      unusedresult:
        # Comma-separated list of functions whose results must be used
        # (in addition to default:
        #   context.WithCancel, context.WithDeadline, context.WithTimeout, context.WithValue, errors.New, fmt.Errorf,
        #   fmt.Sprint, fmt.Sprintf, sort.Reverse
        # ).
        # Default: []
        funcs:
          - (time.Time).AppendFormat # doesn't work
        # Comma-separated list of names of methods of type func() string whose results must be used
        # (in addition to default Error,String)
        # Default: []
        stringmethods:
          - MyMethod

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 0

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [ funlen, gocognit, lll ]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  revive:
    # ALLOW SNAKE CASE BECAUSE I LOVE SNAKE CASE!!!
    rules:
      - name: var-naming
        disabled: true


  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx

  stylecheck:
    checks: [ "-ST1003" ] #, "-ST1000", ] # "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022" ]

  tagliatelle:
    case:
      rules:
        json: snake # why it's not a `snake` by default?!
        yaml: snake # why it's not a `snake` by default?!
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab


  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: true

linters:
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - errcheck #: errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases [fast: false, auto-fix: false]
    - gosimple # (megacheck): Linter for Go source code that specializes in simplifying code [fast: false, auto-fix: false]
    - govet # (vet, vetshadow): Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string [fast: false, auto-fix: false]
    - ineffassign #: Detects when assignments to existing variables are not used [fast: true, auto-fix: false]
    - staticcheck # (megacheck): It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint. [fast: false, auto-fix: false]
    - unused # (megacheck): Checks Go code for unused constants, variables, functions and types [fast: false, auto-fix: false]
    - asasalint #: check for pass []any as any in variadic func(...any) [fast: false, auto-fix: false]
    - asciicheck #: Simple linter to check that your code does not contain non-ASCII identifiers [fast: true, auto-fix: false]
    - bidichk #: Checks for dangerous unicode character sequences [fast: true, auto-fix: false]
    - bodyclose #: checks whether HTTP response body is closed successfully [fast: false, auto-fix: false]
    - containedctx #: containedctx is a linter that detects struct contained context.Context field [fast: false, auto-fix: false]
    - contextcheck #: check whether the function uses a non-inherited context [fast: false, auto-fix: false]
    - decorder #: check declaration order and count of types, constants, variables and functions [fast: true, auto-fix: false]
    - dupl #: Tool for code clone detection [fast: true, auto-fix: false]
    - durationcheck #: check for two durations multiplied together [fast: false, auto-fix: false]
    - errchkjson #: Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted. [fast: false, auto-fix: false]
    - errname #: Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`. [fast: false, auto-fix: false]
    - errorlint #: errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13. [fast: false, auto-fix: false]
    - execinquery #: execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds [fast: false, auto-fix: false]
    - exhaustive #: check exhaustiveness of enum switch statements [fast: false, auto-fix: false]
    - exhaustruct #: Checks if all structure fields are initialized [fast: false, auto-fix: false]
    - exportloopref #: checks for pointers to enclosing loop variables [fast: false, auto-fix: false]
    - forcetypeassert #: finds forced type assertions [fast: true, auto-fix: false]
    - ginkgolinter #: enforces standards of using ginkgo and gomega [fast: false, auto-fix: false]
    - gocheckcompilerdirectives #: Checks that go compiler directive comments (//go:) are valid. [fast: true, auto-fix: false]
    - gochecknoinits #: Checks that no init functions are present in Go code [fast: true, auto-fix: false]
    - gochecksumtype #: Run exhaustiveness checks on Go "sum types" [fast: false, auto-fix: false]
    - goconst #: Finds repeated strings that could be replaced by a constant [fast: true, auto-fix: false]
    - gocritic #: Provides diagnostics that check for bugs, performance and style issues. [fast: false, auto-fix: false]
    - gocyclo #: Computes and checks the cyclomatic complexity of functions [fast: true, auto-fix: false]
    - godox #: Tool for detection of FIXME, TODO and other comment keywords [fast: true, auto-fix: false]
    - gofmt #: Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification [fast: true, auto-fix: true]
    - goheader #: Checks is file header matches to pattern [fast: true, auto-fix: false]
    - goimports #: Check import statements are formatted according to the 'goimport' command. Reformat imports in autofix mode. [fast: true, auto-fix: true]
    - gomnd #: An analyzer to detect magic numbers. [fast: true, auto-fix: false]
    - gomoddirectives #: Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod. [fast: true, auto-fix: false]
    - gomodguard #: Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations. [fast: true, auto-fix: false]
    - goprintffuncname #: Checks that printf-like functions are named with `f` at the end [fast: true, auto-fix: false]
    - gosec # (gas): Inspects source code for security problems [fast: false, auto-fix: false]
    - gosmopolitan #: Report certain i18n/l10n anti-patterns in your Go codebase [fast: false, auto-fix: false]
    - grouper #: An analyzer to analyze expression groups. [fast: true, auto-fix: false]
    - importas #: Enforces consistent import aliases [fast: false, auto-fix: false]
    - interfacebloat #: A linter that checks the number of methods inside an interface. [fast: true, auto-fix: false]
    - loggercheck # (logrlint): Checks key value pairs for common logger libraries (kitlog,klog,logr,zap). [fast: false, auto-fix: false]
    - maintidx #: maintidx measures the maintainability index of each function. [fast: true, auto-fix: false]
    - makezero #: Finds slice declarations with non-zero initial length [fast: false, auto-fix: false]
    - mirror #: reports wrong mirror patterns of bytes/strings usage [fast: false, auto-fix: false]
    - misspell #: Finds commonly misspelled English words in comments [fast: true, auto-fix: true]
    - musttag #: enforce field tags in (un)marshaled structs [fast: false, auto-fix: false]
    - nakedret #: Finds naked returns in functions greater than a specified function length [fast: true, auto-fix: false]
    - nestif #: Reports deeply nested if statements [fast: true, auto-fix: false]
    - nilerr #: Finds the code that returns nil even if it checks that the error is not nil. [fast: false, auto-fix: false]
    - nilnil #: Checks that there is no simultaneous return of `nil` error and an invalid value. [fast: false, auto-fix: false]
    - noctx #: noctx finds sending http request without context.Context [fast: false, auto-fix: false]
    - nolintlint #: Reports ill-formed or insufficient nolint directives [fast: true, auto-fix: false]
    - nonamedreturns #: Reports all named returns [fast: false, auto-fix: false]
    - nosprintfhostport #: Checks for misuse of Sprintf to construct a host with port in a URL. [fast: true, auto-fix: false]
    - paralleltest #: paralleltest detects missing usage of t.Parallel() method in your Go test [fast: false, auto-fix: false]
    - perfsprint #: Checks that fmt.Sprintf can be replaced with a faster alternative. [fast: false, auto-fix: false]
    - prealloc #: Finds slice declarations that could potentially be pre-allocated [fast: true, auto-fix: false]
    - predeclared #: find code that shadows one of Go's predeclared identifiers [fast: true, auto-fix: false]
    - promlinter #: Check Prometheus metrics naming via promlint [fast: true, auto-fix: false]
    - protogetter #: Reports direct reads from proto message fields when getters should be used [fast: false, auto-fix: true]
    - reassign #: Checks that package variables are not reassigned [fast: false, auto-fix: false]
    - revive #: Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [fast: false, auto-fix: false]
    - rowserrcheck #: checks whether Err of rows is checked successfully [fast: false, auto-fix: false]
    - sloglint #: ensure consistent code style when using log/slog [fast: false, auto-fix: false]
    - sqlclosecheck #: Checks that sql.Rows and sql.Stmt are closed. [fast: false, auto-fix: false]
    - stylecheck #: Stylecheck is a replacement for golint [fast: false, auto-fix: false]
    - tagalign #: check that struct tags are well aligned [fast: true, auto-fix: true]
    - tagliatelle #: Checks the struct tags. [fast: true, auto-fix: false]
    - tenv #: tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17 [fast: false, auto-fix: false]
    - testableexamples #: linter checks if examples are testable (have an expected output) [fast: true, auto-fix: false]
    - testifylint #: Checks usage of github.com/stretchr/testify. [fast: false, auto-fix: false]
    - testpackage #: linter that makes you use a separate _test package [fast: true, auto-fix: false]
    - thelper #: thelper detects Go test helpers without t.Helper() call and checks the consistency of test helpers [fast: false, auto-fix: false]
    - tparallel #: tparallel detects inappropriate usage of t.Parallel() method in your Go test codes [fast: false, auto-fix: false]
    - unconvert #: Remove unnecessary type conversions [fast: false, auto-fix: false]
    - unparam #: Reports unused function parameters [fast: false, auto-fix: false]
    - usestdlibvars #: A linter that detect the possibility to use variables/constants from the Go standard library. [fast: true, auto-fix: false]
    - wastedassign #: wastedassign finds wasted assignment statements. [fast: false, auto-fix: false]
    - whitespace #: Tool for detection of leading and trailing whitespace [fast: true, auto-fix: true]
    - zerologlint #: Detects the wrong usage of `zerolog` that a user forgets to dispatch with `Send` or `Msg`. [fast: false, auto-fix: false]
  disable:
    - depguard
    - exhaustivestruct # [deprecated]: Checks if all struct's fields are initialized [fast: false, auto-fix: false]
    - golint # [deprecated]: Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes [fast: false, auto-fix: false]
    - gci #: Gci controls Go package import order and makes it always deterministic. [fast: true, auto-fix: false]
    - forbidigo #: Forbids identifiers [fast: false, auto-fix: false]
    - nosnakecase # [deprecated]: nosnakecase is a linter that detects snake case of variable naming and function name. [fast: true, auto-fix: false]
    - funlen #: Tool for detection of long functions [fast: true, auto-fix: false]
    - godot #: Check if comments end in a period [fast: true, auto-fix: true]

    - gocognit #: Computes and checks the cognitive complexity of functions [fast: true, auto-fix: false]
    - cyclop #: checks function and package cyclomatic complexity [fast: false, auto-fix: false]
    - inamedparam #: reports interfaces with unnamed method parameters [fast: true, auto-fix: false]
    - ireturn #: Accept Interfaces, Return Concrete Types [fast: false, auto-fix: false]
    - wsl #: Whitespace Linter - Forces you to use empty lines! [fast: true, auto-fix: false]

    - lll #: Reports long lines [fast: true, auto-fix: false]
    - varnamelen #: checks that the length of a variable's name matches its scope [fast: false, auto-fix: false]
    - gofumpt #: Gofumpt checks whether code was gofumpt-ed. [fast: true, auto-fix: true]
    - nlreturn #: nlreturn checks for a new line before return and branch statements to increase code clarity [fast: true, auto-fix: false]
    - wrapcheck #: Checks that errors returned from external packages are wrapped [fast: false, auto-fix: false]
    - goerr113 #: Go linter to check the errors handling expressions [fast: false, auto-fix: false]
    - dogsled #: Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()) [fast: true, auto-fix: false]
    - gochecknoglobals #: check that no global variables exist [fast: false, auto-fix: false]
    - dupword #: checks for duplicate words in the source code [fast: true, auto-fix: true]
    - deadcode # [deprecated]: Finds unused code [fast: false, auto-fix: false]
    - ifshort # [deprecated]: Checks that your code uses short syntax for if-statements whenever possible [fast: true, auto-fix: false]
    - interfacer # [deprecated]: Linter that suggests narrower interface types [fast: false, auto-fix: false]
    - maligned # [deprecated]: Tool to detect Go structs that would take less memory if their fields were sorted [fast: false, auto-fix: false]
    - scopelint # [deprecated]: Scopelint checks for unpinned variables in go programs [fast: true, auto-fix: false]
    - structcheck # [deprecated]: Finds unused struct fields [fast: false, auto-fix: false]
    - varcheck # [deprecated]: Finds unused global variables and constants [fast: false, auto-fix: false]